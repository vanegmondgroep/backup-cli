#!/bin/bash

set -e

trap 'catch $?' EXIT

catch() {
  if [[ $1 -gt 0 ]]; then
    if [[ -f "$BACKUP_LOG" ]]; then cat "$BACKUP_LOG"; fi
    log_error "Command failed (code: $1)"
  fi
}

log() {
  local dt
  dt="$(date --rfc-3339=seconds)"
  printf '[%s] %s %s\n' "$1" "$dt" "${@:2}"
}

log_info() {
  if [[ -n $2 ]]; then
    log "${1^^}" "${@:2}" >&1
  else
    log "INFO" "${@}" >&1
  fi
}

log_error() {
  if [[ -n $2 ]]; then
    log "${1^^}" "${@:2}" >&2
  else
    log "ERROR" "${@}" >&2
  fi

  exit 1
}

load_env() {
  if [[ ! -f .env ]]; then
    log_error "Could not find .env file"
  fi

  # shellcheck disable=SC2046
  export $(grep -v '^#' .env | xargs -d '\n')

  BACKUP_PASSWORD=${BACKUP_PASSWORD:-supersecret}
  BACKUP_HOOKS_PATH=$(realpath "${BACKUP_HOOKS_PATH:-./backup/hooks}")
  BACKUP_REPOSITORIES_PATH=$(realpath "${BACKUP_REPOSITORIES_PATH:-./backup/repositories}")
  BACKUP_LOGS_PATH=$(realpath "${BACKUP_LOGS_PATH:-./backup/logs}")
}

service_exists() {

  if [[ -z $1 ]]; then
    log_error "No service specified"
  fi

  BACKUP_SERVICE="${1/-/_}"
  BACKUP_PATH_VAR=${BACKUP_SERVICE^^}_BACKUP_PATH

  if [[ ! -d "${!BACKUP_PATH_VAR}" ]]; then
    log_error "$1" "Backup path [${!BACKUP_PATH_VAR}] doesn't exist"
  fi

  BACKUP_PATH=$(realpath "${!BACKUP_PATH_VAR}")

  export BACKUP_PATH=$BACKUP_PATH
  export BACKUP_LOG="$BACKUP_LOGS_PATH/$1.log"

  if [[ -z $BACKUP_PATH ]]; then
    log_error "$1" "Environment [$BACKUP_PATH_VAR] is undefined"
  fi

  if [[ ! -d "$BACKUP_PATH" ]]; then
    log_error "$1" "Backup path [$BACKUP_PATH] doesn't exist"
  fi
}

restic_cmd() {
  RESTIC_PASSWORD=$BACKUP_PASSWORD restic -r "$BACKUP_REPOSITORIES_PATH/$1" "${@:2}"
}

restic_init() {
  restic_cmd "$1" init &>/dev/null || true
}

restic_backup() {
  cd "$BACKUP_PATH"
  restic_cmd "$1" backup --tag "$1" .
}

restic_snapshots() {
  restic_cmd "$1" snapshots
}

restic_restore() {
  cd "$BACKUP_PATH"
  restic_cmd "$1" restore "$2" --target=.
}

restic_cleanup() {
  restic_cmd "$1" forget --keep-last 5 --keep-daily 31 --keep-monthly 12 --keep-yearly 1
}

backup() {
  pre_backup_hook="$BACKUP_HOOKS_PATH/$1_pre_backup_hook"
  post_backup_hook="$BACKUP_HOOKS_PATH/$1_post_backup_hook"

  if [[ -f "$pre_backup_hook" ]]; then
    log_info "$1" "Run pre backup hook"
    # shellcheck disable=SC1090
    source "$pre_backup_hook"
  fi

  log_info "$1" "Initialize backup repository"
  restic_init "$1"

  log_info "$1" "Backup files to repository"
  restic_backup "$1"

  log_info "$1" "Cleanup old backups"
  restic_cleanup "$1"

  if [[ -f "$post_backup_hook" ]]; then
    log_info "$1" "Run post backup hook"
    # shellcheck disable=SC1090
    source "$post_backup_hook"
  fi
}

snapshots() {
  restic_snapshots "$1"
}

restore() {
  pre_restore_hook="$BACKUP_HOOKS_PATH/$1_pre_restore_hook"
  post_restore_hook="$BACKUP_HOOKS_PATH/$1_post_restore_hook"

  if [[ -z "$2" ]]; then
    log_error "$1" "No snapshot ID specified"
  fi

  if [[ -f "$pre_restore_hook" ]]; then
    log_info "$1" "Run pre restore hook"
    # shellcheck disable=SC1090
    source "$pre_restore_hook"
  fi

  log_info "$1" "Restore files from repository"
  restic_restore "$1" "$2"

  if [[ -f "$post_restore_hook" ]]; then
    log_info "$1" "Run post restore hook"
    # shellcheck disable=SC1090
    source "$post_restore_hook"
  fi
}

load_env

case $1 in
backup)
  service_exists "$2"
  log_info "$2" "Backup service data"
  backup "${@:2}" &>"$BACKUP_LOG"
  log_info "$2" "Backup completed!"
  ;;
snapshots)
  service_exists "$2"
  snapshots "${@:2}"
  ;;
restore)
  service_exists "$2"
  log_info "$2" "Restore service data"
  restore "${@:2}" &>"$BACKUP_LOG"
  log_info "$2" "Restore completed!"
  ;;
log)
  service_exists "$2"
  cat "$BACKUP_LOG"
  ;;
*)
  log_error "Command not found"
  ;;
esac
